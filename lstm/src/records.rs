// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `records.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:BondingCurveData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BondingCurveData {
    // message fields
    // @@protoc_insertion_point(field:BondingCurveData.mintId)
    pub mintId: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:BondingCurveData.priceInSol)
    pub priceInSol: f64,
    // @@protoc_insertion_point(field:BondingCurveData.slot)
    pub slot: u64,
    // special fields
    // @@protoc_insertion_point(special_field:BondingCurveData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BondingCurveData {
    fn default() -> &'a BondingCurveData {
        <BondingCurveData as ::protobuf::Message>::default_instance()
    }
}

impl BondingCurveData {
    pub fn new() -> BondingCurveData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mintId",
            |m: &BondingCurveData| { &m.mintId },
            |m: &mut BondingCurveData| { &mut m.mintId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "priceInSol",
            |m: &BondingCurveData| { &m.priceInSol },
            |m: &mut BondingCurveData| { &mut m.priceInSol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slot",
            |m: &BondingCurveData| { &m.slot },
            |m: &mut BondingCurveData| { &mut m.slot },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BondingCurveData>(
            "BondingCurveData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BondingCurveData {
    const NAME: &'static str = "BondingCurveData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.mintId)?;
                },
                8 => {
                    self.mintId.push(is.read_int32()?);
                },
                17 => {
                    self.priceInSol = is.read_double()?;
                },
                24 => {
                    self.slot = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_int32_size(1, &self.mintId);
        if self.priceInSol != 0. {
            my_size += 1 + 8;
        }
        if self.slot != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.slot);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_int32(1, &self.mintId)?;
        if self.priceInSol != 0. {
            os.write_double(2, self.priceInSol)?;
        }
        if self.slot != 0 {
            os.write_uint64(3, self.slot)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BondingCurveData {
        BondingCurveData::new()
    }

    fn clear(&mut self) {
        self.mintId.clear();
        self.priceInSol = 0.;
        self.slot = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BondingCurveData {
        static instance: BondingCurveData = BondingCurveData {
            mintId: ::std::vec::Vec::new(),
            priceInSol: 0.,
            slot: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BondingCurveData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BondingCurveData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BondingCurveData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BondingCurveData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LogData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LogData {
    // message fields
    // @@protoc_insertion_point(field:LogData.slot)
    pub slot: u64,
    // @@protoc_insertion_point(field:LogData.tokenizedLogs)
    pub tokenizedLogs: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:LogData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogData {
    fn default() -> &'a LogData {
        <LogData as ::protobuf::Message>::default_instance()
    }
}

impl LogData {
    pub fn new() -> LogData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slot",
            |m: &LogData| { &m.slot },
            |m: &mut LogData| { &mut m.slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tokenizedLogs",
            |m: &LogData| { &m.tokenizedLogs },
            |m: &mut LogData| { &mut m.tokenizedLogs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogData>(
            "LogData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LogData {
    const NAME: &'static str = "LogData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.slot = is.read_uint64()?;
                },
                18 => {
                    is.read_repeated_packed_int32_into(&mut self.tokenizedLogs)?;
                },
                16 => {
                    self.tokenizedLogs.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.slot != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.slot);
        }
        my_size += ::protobuf::rt::vec_packed_int32_size(2, &self.tokenizedLogs);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.slot != 0 {
            os.write_uint64(1, self.slot)?;
        }
        os.write_repeated_packed_int32(2, &self.tokenizedLogs)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LogData {
        LogData::new()
    }

    fn clear(&mut self) {
        self.slot = 0;
        self.tokenizedLogs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogData {
        static instance: LogData = LogData {
            slot: 0,
            tokenizedLogs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rrecords.proto\"^\n\x10BondingCurveData\x12\x16\n\x06mintId\x18\x01\
    \x20\x03(\x05R\x06mintId\x12\x1e\n\npriceInSol\x18\x02\x20\x01(\x01R\npr\
    iceInSol\x12\x12\n\x04slot\x18\x03\x20\x01(\x04R\x04slot\"C\n\x07LogData\
    \x12\x12\n\x04slot\x18\x01\x20\x01(\x04R\x04slot\x12$\n\rtokenizedLogs\
    \x18\x02\x20\x03(\x05R\rtokenizedLogsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(BondingCurveData::generated_message_descriptor_data());
            messages.push(LogData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
